 org $8000
 
 ldab #$ee    // значение дл€ инициализацци
 ldx  #$8200  // место начала массива
 ldaa #$1f    // количество элементов
 ldy  #0      // счетчик суммы битов (0)
 
init
 stab 0,x     // инициализируем €чейку
 inx          // смещаем €чейку на 1 вниз
 deca         // уменьшвем длину массива
 bne init     // переходим по метке цикла пока A != 0 (пока не включитс€ флаг Z)

 ldx  #$8200  // место начала массива
 ldaa #$1f    // количество элементов
 
 stx  $81f0   // резервируем место начала массива
 staa $81f2   // резервируем количество элементов

count         
 ldaa #1      // заносим в регист A значение 1
 ldab $0,x    // заносим в B значение текущей €чейки
 stab $81fa   // заносим значение €чейки (регистра B) в пам€ть
 ldab #0      // обнул€ем регистр B
 ldx  #8      // заносим в регист X значение 8 (1 байт)

bitcount      
 anda $81fa   // логической "и" 
 lsr  $81fa   // логический сдвиг влево
 staa $81fd   // заносим значение регистра A в пам€ть
 addb $81fd   // складываем регистр B с €чейкой пам€ти, где хранитьс€ A
 ldaa #1      // заносим в регист A значение 1 
 dex          // смещаем €чейку на 1 вверх
 bne bitcount // переходим по метке вложенного цикла пока X != 0 (пока не включитс€ флаг Z) 
 
 stab $8400   // заносим в пам€ть значение региста B (количество включенных битов в €чейке)
 ldab #8      // заносим значение 8 в регистр B
 subb $8400   // получаем количество выклчюенных битов

 aby          // Y = Y + B
 
 ldx  $81f0   // получаем текущую €чейке массива
 ldaa $81f2   // получаем число непройденных €чеек массива (размер)
 
 inx          // смещаемс€ на 1 €чейку вниз
 deca         // уменьшаем число непройденных €чеек массива (размер)
  
 stx  $81f0   // заносим в пам€ть текущую €чейку массива
 staa $81f2   // заносим в пам€ть число непройденных €чеек массива (размер)
 
 bne count    // переходим по метке внешнего цикла пока A != 0 (пока не включитс€ флаг Z) 
 
 wai          // остановка программы
